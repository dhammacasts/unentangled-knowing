"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rss = _interopRequireDefault(require("rss"));

var _deprecate = _interopRequireDefault(require("./deprecate"));

var _buildiTunesCategories = _interopRequireDefault(require("./buildiTunesCategories"));

var _durationFormat = _interopRequireDefault(require("./durationFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Podcast {
  constructor(options, items) {
    this.init(options, items);
  }

  init(options = {}, items) {
    this.feedOptions = {};
    this.feedOptions.title = options.title || 'Untitled Podcast Feed';
    this.feedOptions.description = options.description || '';
    this.feedOptions.generator = options.generator || 'Podcast for Node';
    this.feedOptions.feed_url = options.feed_url || options.feedUrl;
    this.feedOptions.site_url = options.site_url || options.siteUrl;
    this.feedOptions.image_url = options.image_url || options.imageUrl;
    this.feedOptions.author = options.author;
    this.feedOptions.categories = options.categories;
    this.feedOptions.pubDate = options.pubDate;
    this.feedOptions.docs = options.docs;
    this.feedOptions.copyright = options.copyright;
    this.feedOptions.language = options.language;
    this.feedOptions.managingEditor = options.managingEditor;
    this.feedOptions.webMaster = options.webMaster;
    this.feedOptions.ttl = options.ttl;
    this.feedOptions.geoRSS = options.geoRSS || false;
    this.feedOptions.custom_elements = options.customElements || [];
    this.feedOptions.custom_namespaces = _objectSpread({
      itunes: 'http://www.itunes.com/dtds/podcast-1.0.dtd'
    }, options.customNamespaces);

    if (options.itunesAuthor || options.author) {
      this.feedOptions.custom_elements.push({
        'itunes:author': options.itunesAuthor || options.author
      });
    }

    if (options.itunesSubtitle) {
      this.feedOptions.custom_elements.push({
        'itunes:subtitle': options.itunesSubtitle
      });
    }

    if (options.itunesSummary || options.description) {
      this.feedOptions.custom_elements.push({
        'itunes:summary': options.itunesSummary || options.description
      });
    }

    if (options.itunesType) {
      this.feedOptions.custom_elements.push({
        'itunes:type': options.itunesType
      });
    }

    this.feedOptions.itunesOwner = options.itunesOwner || {
      name: options.author || '',
      email: ''
    };
    this.feedOptions.custom_elements.push({
      'itunes:owner': [{
        'itunes:name': this.feedOptions.itunesOwner.name
      }, {
        'itunes:email': this.feedOptions.itunesOwner.email
      }]
    });
    this.feedOptions.custom_elements.push({
      'itunes:explicit': options.itunesExplicit || false ? 'Yes' : 'No'
    });

    if (options.itunesCategory) {
      // [{text:String, subcats:[{text:String, subcats:Array}]}]
      const categories = (0, _buildiTunesCategories.default)(options.itunesCategory);
      categories.forEach(category => {
        this.feedOptions.custom_elements.push(category);
      });
    }

    if (options.itunesImage || options.image_url || options.imageUrl) {
      this.feedOptions.custom_elements.push({
        'itunes:image': {
          _attr: {
            href: options.itunesImage || options.image_url || options.imageUrl
          }
        }
      });
    }

    this.items = [];
    const initialItems = items || [];
    initialItems.forEach(item => this.addItem(item));
  }

  addItem(itemOptions = {}) {
    const item = {
      title: itemOptions.title || 'No title',
      description: itemOptions.description || '',
      url: itemOptions.url,
      guid: itemOptions.guid,
      categories: itemOptions.categories || [],
      author: itemOptions.author,
      date: itemOptions.date,
      lat: itemOptions.lat,
      long: itemOptions.long,
      enclosure: itemOptions.enclosure || false,
      custom_elements: itemOptions.customElements || []
    };

    if (itemOptions.content) {
      item.custom_elements.push({
        'content:encoded': {
          _cdata: itemOptions.content
        }
      });
    }

    if (itemOptions.itunesAuthor || itemOptions.author) item.custom_elements.push({
      'itunes:author': itemOptions.itunesAuthor || itemOptions.author
    });
    if (itemOptions.itunesSubtitle) item.custom_elements.push({
      'itunes:subtitle': itemOptions.itunesSubtitle
    });
    if (itemOptions.itunesSummary || itemOptions.description) item.custom_elements.push({
      'itunes:summary': itemOptions.itunesSummary || itemOptions.description
    });
    item.custom_elements.push({
      'itunes:explicit': itemOptions.itunesExplicit || false ? 'Yes' : 'No'
    });
    if (itemOptions.itunesDuration) item.custom_elements.push({
      'itunes:duration': (0, _durationFormat.default)(itemOptions.itunesDuration)
    });

    if (itemOptions.itunesKeywords) {
      (0, _deprecate.default)({
        name: 'itunesKeywords',
        type: 'option'
      });
      item.custom_elements.push({
        'itunes:keywords': itemOptions.itunesKeywords
      });
    }

    if (itemOptions.itunesImage || itemOptions.image_url || itemOptions.imageUrl) {
      item.custom_elements.push({
        'itunes:image': {
          _attr: {
            href: itemOptions.itunesImage || itemOptions.image_url || itemOptions.imageUrl
          }
        }
      });
    }

    if (itemOptions.itunesSeason) item.custom_elements.push({
      'itunes:season': itemOptions.itunesSeason
    });
    if (itemOptions.itunesEpisode) item.custom_elements.push({
      'itunes:episode': itemOptions.itunesEpisode
    });
    if (itemOptions.itunesTitle) item.custom_elements.push({
      'itunes:title': itemOptions.itunesTitle
    });
    if (itemOptions.itunesEpisodeType) item.custom_elements.push({
      'itunes:episodeType': itemOptions.itunesEpisodeType
    });
    if (itemOptions.itunesNewFeedUrl) item.custom_elements.push({
      'itunes:new-feed-url': itemOptions.itunesNewFeedUrl
    });
    this.items.push(item);
    return this;
  }

  buildXml(indent) {
    const rss = new _rss.default(this.feedOptions);
    this.items.forEach(item => rss.item(item));
    return rss.xml(indent);
  }
  /**
  * @deprecated Since version 1.0.0
  */


  item(...args) {
    (0, _deprecate.default)({
      type: 'method',
      name: 'item',
      version: '1.0.0',
      alternative: 'addItem'
    });
    return this.addItem(...args);
  }
  /**
  * @deprecated Since version 1.0.0
  */


  xml(...args) {
    (0, _deprecate.default)({
      type: 'method',
      name: 'xml',
      version: '1.0.0',
      alternative: 'buildXml'
    });
    return this.buildXml(...args);
  }

}

exports.default = Podcast;
module.exports = Podcast;